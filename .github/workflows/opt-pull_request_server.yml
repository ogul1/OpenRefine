# Only really needed if we're testing in separate jobs (e.g. multiple Java versions)

name: Modified CI
permissions: read-all
jobs:
  linux_server_tests:
    strategy:
      matrix:
        java:
        - 21
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
        - 5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:8
        ports:
        - 3306
        env:
          MYSQL_ROOT_PASSWORD: root
        options: --health-cmd "mysqladmin ping" --health-interval 5s --health-timeout
          2s --health-retries 3
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-linux_server_tests (${{ matrix.java }}).csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/OpenRefine/OpenRefine', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Set up secrets
      run: |-
        echo "COVERALLS_TOKEN=$(echo eUVUVGRHOFJhQm9GMFJBYTNibjVhcWFEblpac1lmMlE3Cg== | base64 -d)" >> $GITHUB_ENV
    - run: touch optcd-3.txt
    - uses: actions/checkout@v4
    - run: touch optcd-4.txt
    - name: Set up Java ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
        cache: maven
    - run: touch optcd-5.txt
    - name: Check Java linting
      id: java_linting
      run: |-
        mvn -B compile test-compile formatter:validate impsort:check javadoc:javadoc -Ddoclint=all
    - run: touch optcd-6.txt
    - name: Configure connections to databases
      id: configure_db_connections
      run: cat extensions/database/tests/conf/github_actions_tests.xml | sed -e "s/MYSQL_PORT/${{
        job.services.mysql.ports[3306] }}/g" | sed -e "s/POSTGRES_PORT/${{ job.services.postgres.ports[5432]
        }}/g" > extensions/database/tests/conf/tests.xml
    - run: touch optcd-7.txt
    - name: Populate databases with test data
      id: populate_databases_with_test_data
      run: |-
        mysql -u root -h 127.0.0.1 -P ${{ job.services.mysql.ports[3306] }} -proot -e 'CREATE DATABASE test_db;'
        mysql -u root -h 127.0.0.1 -P ${{ job.services.mysql.ports[3306] }} -proot < extensions/database/tests/conf/test-mysql.sql
        psql -U postgres test_db -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} < extensions/database/tests/conf/test-pgsql.sql
      env:
        PGPASSWORD: postgres
    - run: touch optcd-8.txt
    - name: Build and test with Maven
      run: mvn -B jacoco:prepare-agent test jacoco:report
    - run: touch optcd-9.txt
    - name: Coveralls main
      uses: coverallsapp/github-action@v2
      with:
        base-path: main/src
        files: main/target/site/jacoco/jacoco.xml
        format: jacoco
        flag-name: Java-${{ matrix.java }}-main
        fail-on-error: false
        parallel: true
    - run: touch optcd-10.txt
    - name: Coveralls database
      uses: coverallsapp/github-action@v2
      with:
        base-path: extensions/database/src
        files: extensions/database/target/site/jacoco/jacoco.xml
        github-token: ${{ env.COVERALLS_TOKEN }}
        format: jacoco
        flag-name: Java-${{ matrix.java }}-database
        fail-on-error: false
        parallel: true
    - run: touch optcd-11.txt
    - name: Coveralls phonetic
      uses: coverallsapp/github-action@v2
      with:
        base-path: extensions/phonetic/src
        files: extensions/phonetic/target/site/jacoco/jacoco.xml
        github-token: ${{ env.COVERALLS_TOKEN }}
        format: jacoco
        flag-name: Java-${{ matrix.java }}-phonetic
        fail-on-error: false
        parallel: true
    - run: touch optcd-12.txt
    - name: Coveralls gdata
      uses: coverallsapp/github-action@v2
      with:
        base-path: extensions/gdata/src
        files: extensions/gdata/target/site/jacoco/jacoco.xml
        github-token: ${{ env.COVERALLS_TOKEN }}
        format: jacoco
        flag-name: Java-${{ matrix.java }}-gdata
        fail-on-error: false
        parallel: true
    - run: touch optcd-13.txt
    - name: Coveralls wikibase
      uses: coverallsapp/github-action@v2
      with:
        base-path: extensions/wikibase/src
        files: extensions/wikibase/target/site/jacoco/jacoco.xml
        github-token: ${{ env.COVERALLS_TOKEN }}
        format: jacoco
        flag-name: Java-${{ matrix.java }}-wikibase
        fail-on-error: false
        parallel: true
    - run: touch optcd-14.txt
    - name: Coveralls jython
      uses: coverallsapp/github-action@v2
      with:
        base-path: extensions/jython/src
        files: extensions/jython/target/site/jacoco/jacoco.xml
        github-token: ${{ env.COVERALLS_TOKEN }}
        format: jacoco
        flag-name: Java-${{ matrix.java }}-jython
        fail-on-error: false
        parallel: true
    - run: touch optcd-15.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-linux_server_tests (${{ matrix.java }})
        path: /home/runner/inotifywait-log-linux_server_tests (${{ matrix.java }}).csv
    name: linux_server_tests (${{ matrix.java }})
  windows_server_tests:
    runs-on: windows-latest
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-windows_server_tests.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/OpenRefine/OpenRefine', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
        cache: maven
    - run: touch optcd-4.txt
    - name: Check Java linting
      id: java_linting
      run: |-
        mvn -B formatter:validate impsort:check
    - run: touch optcd-5.txt
    - name: Build and test with Maven
      run: mvn -B jacoco:prepare-agent test
    - run: touch optcd-6.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-windows_server_tests
        path: /home/runner/inotifywait-log-windows_server_tests.csv
    name: windows_server_tests
  finish:
    needs: linux_server_tests
    runs-on: ubuntu-latest
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-finish.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/OpenRefine/OpenRefine', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Close parallel build
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
    - run: touch optcd-3.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-finish
        path: /home/runner/inotifywait-log-finish.csv
    name: finish
'on':
- push
- workflow_dispatch
